# Generated by Django 4.1.7 on 2023-02-24 13:04

from django.db import migrations
from django.contrib.auth.management import create_permissions
from django.apps import apps

APPS = [
    'event_tracker'
]

def create_applications_permissions():
    for app in APPS:
        app_config = apps.get_app_config(app)
        create_permissions(app_config)

def rename_original_blueteam_role(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    orig_group = Group.objects.get(name="Client Blue Team")
    orig_group.name = "Client Blue Team - Read Only"
    orig_group.save()

def undo_rename_original_blueteam_role(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    orig_group = Group.objects.get(name="Client Blue Team - Read Only")
    orig_group.name = "Client Blue Team"
    orig_group.save()

def create_blueteam_limited_write_role(apps, schema_editor):
    create_applications_permissions()  # Ensure values exist in DB to reference.
                                       # Not normally made by Django until after migration via a 'post_migrate' signal.

    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    newgroup = Group(name="Client Blue Team - Limited Write")
    newgroup.save()

    newgroup.permissions.add(Permission.objects.get(codename="view_attacksubtechnique", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_attacktactic", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_attacktechnique", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_context", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_event", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_file", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_filedistribution", content_type__app_label="event_tracker"))
    newgroup.permissions.add(Permission.objects.get(codename="view_task", content_type__app_label="event_tracker"))

    # Special permissions for the Limited Write
    newgroup.permissions.add(Permission.objects.get(codename="change_event_limited", content_type__app_label="event_tracker"))

    newgroup.save()


def delete_blueteam_limited_write_role(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.filter(name="Client Blue Team - Limited Write").delete()


class Migration(migrations.Migration):
    dependencies = [
        ('event_tracker', '0055_alter_event_detected_alter_event_prevented'),
    ]

    operations = [
        migrations.RunPython(rename_original_blueteam_role, undo_rename_original_blueteam_role),
        migrations.AlterModelOptions(
            name='event',
            options={'ordering': ['-timestamp'], 'permissions': (
            ('change_event_limited', 'Can modify a limited set of fields in an event - outcome and detection'),)},
        ),
        migrations.RunPython(create_blueteam_limited_write_role, delete_blueteam_limited_write_role),
    ]
